https://github.com/dabeaz/ply/issues/50

--- test/testlex.py
+++ test/testlex.py
@@ -8,7 +8,7 @@
 
 import sys
 import os
-import imp
+import platform
 import warnings
 
 sys.path.insert(0,"..")
@@ -16,23 +16,42 @@
 
 import ply.lex
 
-def make_pymodule_path(filename):
-    path = os.path.dirname(filename)
-    file = os.path.basename(filename)
-    mod, ext = os.path.splitext(file)
-
-    if sys.hexversion >= 0x3020000:
-        modname = mod+"."+imp.get_tag()+ext
-        fullpath = os.path.join(path,'__pycache__',modname)
+def implementation():
+    if platform.system().startswith("Java"):
+        return "Jython"
+    elif hasattr(sys, "pypy_version_info"):
+        return "PyPy"
+    else:
+        return "CPython"
+
+def cache_module_path(filename, debug):
+    mod, ext = os.path.splitext(filename)
+
+    if sys.hexversion >= 0x3040000:
+        import importlib.util
+        fullpath = importlib.util.cache_from_source(filename, debug)
+    elif sys.hexversion >= 0x3020000:
+        import imp
+        fullpath = imp.cache_from_source(filename, debug)
+    # Jython <3.2
+    elif implementation() == "Jython":
+        fullpath = mod + "$py.class"
+    # PyPy for Python <3.2
+    elif implementation() == "PyPy":
+        fullpath = filename + "c"
+    # CPython <3.2
     else:
-        fullpath = filename
+        if debug:
+            fullpath = filename + "c"
+        else:
+            fullpath = filename + "o"
     return fullpath
 
-def pymodule_out_exists(filename):
-    return os.path.exists(make_pymodule_path(filename))
+def cache_module_exists(filename, debug):
+    return os.path.exists(cache_module_path(filename, debug))
 
-def pymodule_out_remove(filename):
-    os.remove(make_pymodule_path(filename))
+def cache_module_remove(filename, debug):
+    os.remove(cache_module_path(filename, debug))
 
 def check_expected(result, expected):
     if sys.version_info[0] >= 3:
@@ -138,8 +157,12 @@
     def test_lex_re1(self):
         self.assertRaises(SyntaxError,run_import,"lex_re1")
         result = sys.stderr.getvalue()
-        self.assert_(check_expected(result,
-                                    "Invalid regular expression for rule 't_NUMBER'. unbalanced parenthesis\n"))
+        if sys.hexversion >= 0x3050000:
+            self.assert_(check_expected(result,
+                                        "Invalid regular expression for rule 't_NUMBER'. unbalanced parenthesis at position 18\n"))
+        else:
+            self.assert_(check_expected(result,
+                                        "Invalid regular expression for rule 't_NUMBER'. unbalanced parenthesis\n"))
 
     def test_lex_re2(self):
         self.assertRaises(SyntaxError,run_import,"lex_re2")
@@ -150,9 +173,14 @@
     def test_lex_re3(self):
         self.assertRaises(SyntaxError,run_import,"lex_re3")
         result = sys.stderr.getvalue()
-        self.assert_(check_expected(result,
-                                    "Invalid regular expression for rule 't_POUND'. unbalanced parenthesis\n"
-                                    "Make sure '#' in rule 't_POUND' is escaped with '\\#'\n"))
+        if sys.hexversion >= 0x3050000:
+            self.assert_(check_expected(result,
+                                        "Invalid regular expression for rule 't_POUND'. unbalanced parenthesis at position 14\n"
+                                        "Make sure '#' in rule 't_POUND' is escaped with '\\#'\n"))
+        else:
+            self.assert_(check_expected(result,
+                                        "Invalid regular expression for rule 't_POUND'. unbalanced parenthesis\n"
+                                        "Make sure '#' in rule 't_POUND' is escaped with '\\#'\n"))
 
     def test_lex_rule1(self):
         self.assertRaises(SyntaxError,run_import,"lex_rule1")
@@ -324,11 +352,11 @@
         except OSError:
             pass
         try:
-            os.remove("lextab.pyc")
+            cache_module_remove("lextab.py", True)
         except OSError:
             pass
         try:
-            os.remove("lextab.pyo")
+            cache_module_remove("lextab.py", False)
         except OSError:
             pass
         run_import("lex_optimize")
@@ -341,35 +369,37 @@
         self.assert_(os.path.exists("lextab.py"))
 
 
-        p = subprocess.Popen([sys.executable,'-O','lex_optimize.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
+        if implementation() not in ("Jython", "PyPy"):
+            p = subprocess.Popen([sys.executable,'-O','lex_optimize.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
 
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(PLUS,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("lextab.pyo"))
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(PLUS,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("lextab.py", False))
+
+            cache_module_remove("lextab.py", False)
+            p = subprocess.Popen([sys.executable,'-OO','lex_optimize.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(PLUS,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("lextab.py", False))
 
-        pymodule_out_remove("lextab.pyo")
-        p = subprocess.Popen([sys.executable,'-OO','lex_optimize.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(PLUS,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("lextab.pyo"))
         try:
             os.remove("lextab.py")
         except OSError:
             pass
         try:
-            pymodule_out_remove("lextab.pyc")
+            cache_module_remove("lextab.py", True)
         except OSError:
             pass
         try:
-            pymodule_out_remove("lextab.pyo")
+            cache_module_remove("lextab.py", False)
         except OSError:
             pass
 
@@ -379,11 +409,11 @@
         except OSError:
             pass
         try:
-            os.remove("opt2tab.pyc")
+            cache_module_remove("opt2tab.py", True)
         except OSError:
             pass
         try:
-            os.remove("opt2tab.pyo")
+            cache_module_remove("opt2tab.py", False)
         except OSError:
             pass
         run_import("lex_optimize2")
@@ -394,33 +424,35 @@
                                     "(NUMBER,4,1,2)\n"))
         self.assert_(os.path.exists("opt2tab.py"))
 
-        p = subprocess.Popen([sys.executable,'-O','lex_optimize2.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(PLUS,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("opt2tab.pyo"))
-        pymodule_out_remove("opt2tab.pyo")
-        p = subprocess.Popen([sys.executable,'-OO','lex_optimize2.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(PLUS,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("opt2tab.pyo"))
+        if implementation() not in ("Jython", "PyPy"):
+            p = subprocess.Popen([sys.executable,'-O','lex_optimize2.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(PLUS,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("opt2tab.py", False))
+            cache_module_remove("opt2tab.py", False)
+            p = subprocess.Popen([sys.executable,'-OO','lex_optimize2.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(PLUS,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("opt2tab.py", False))
+
         try:
             os.remove("opt2tab.py")
         except OSError:
             pass
         try:
-            pymodule_out_remove("opt2tab.pyc")
+            cache_module_remove("opt2tab.py", True)
         except OSError:
             pass
         try:
-            pymodule_out_remove("opt2tab.pyo")
+            cache_module_remove("opt2tab.py", False)
         except OSError:
             pass
 
@@ -442,23 +474,25 @@
                                     "(NUMBER,4,1,2)\n"))
         self.assert_(os.path.exists("lexdir/sub/calctab.py"))
 
-        p = subprocess.Popen([sys.executable,'-O','lex_optimize3.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(PLUS,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("lexdir/sub/calctab.pyo"))
-        pymodule_out_remove("lexdir/sub/calctab.pyo")
-        p = subprocess.Popen([sys.executable,'-OO','lex_optimize3.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(PLUS,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("lexdir/sub/calctab.pyo"))
+        if implementation() not in ("Jython", "PyPy"):
+            p = subprocess.Popen([sys.executable,'-O','lex_optimize3.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(PLUS,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("lexdir/sub/calctab.py", False))
+            cache_module_remove("lexdir/sub/calctab.py", False)
+            p = subprocess.Popen([sys.executable,'-OO','lex_optimize3.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(PLUS,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("lexdir/sub/calctab.py", False))
+
         try:
             shutil.rmtree("lexdir")
         except OSError:
@@ -470,11 +504,11 @@
         except OSError:
             pass
         try:
-            os.remove("aliastab.pyc")
+            cache_module_remove("aliastab.py", True)
         except OSError:
             pass
         try:
-            os.remove("aliastab.pyo")
+            cache_module_remove("aliastab.py", False)
         except OSError:
             pass
         run_import("lex_opt_alias")
@@ -485,33 +519,35 @@
                                     "(NUMBER,4,1,2)\n"))
         self.assert_(os.path.exists("aliastab.py"))
 
-        p = subprocess.Popen([sys.executable,'-O','lex_opt_alias.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(+,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("aliastab.pyo"))
-        pymodule_out_remove("aliastab.pyo")
-        p = subprocess.Popen([sys.executable,'-OO','lex_opt_alias.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(NUMBER,3,1,0)\n"
-                                    "(+,'+',1,1)\n"
-                                    "(NUMBER,4,1,2)\n"))
-        self.assert_(pymodule_out_exists("aliastab.pyo"))
+        if implementation() not in ("Jython", "PyPy"):
+            p = subprocess.Popen([sys.executable,'-O','lex_opt_alias.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(+,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("aliastab.py", False))
+            cache_module_remove("aliastab.py", False)
+            p = subprocess.Popen([sys.executable,'-OO','lex_opt_alias.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(NUMBER,3,1,0)\n"
+                                        "(+,'+',1,1)\n"
+                                        "(NUMBER,4,1,2)\n"))
+            self.assert_(cache_module_exists("aliastab.py", False))
+
         try:
             os.remove("aliastab.py")
         except OSError:
             pass
         try:
-            pymodule_out_remove("aliastab.pyc")
+            cache_module_remove("aliastab.py", True)
         except OSError:
             pass
         try:
-            pymodule_out_remove("aliastab.pyo")
+            cache_module_remove("aliastab.py", False)
         except OSError:
             pass
 
@@ -521,11 +557,11 @@
         except OSError:
             pass
         try:
-            os.remove("manytab.pyc")
+            cache_module_remove("manytab.py", True)
         except OSError:
             pass
         try:
-            os.remove("manytab.pyo")
+            cache_module_remove("manytab.py", False)
         except OSError:
             pass
         run_import("lex_many_tokens")
@@ -542,31 +578,33 @@
 
         self.assert_(os.path.exists("manytab.py"))
 
-        p = subprocess.Popen([sys.executable,'-O','lex_many_tokens.py'],
-                             stdout=subprocess.PIPE)
-        result = p.stdout.read()
-        self.assert_(check_expected(result,
-                                    "(TOK34,'TOK34:',1,0)\n"
-                                    "(TOK143,'TOK143:',1,7)\n"
-                                    "(TOK269,'TOK269:',1,15)\n"
-                                    "(TOK372,'TOK372:',1,23)\n"
-                                    "(TOK452,'TOK452:',1,31)\n"
-                                    "(TOK561,'TOK561:',1,39)\n"
-                                    "(TOK999,'TOK999:',1,47)\n"
-                                    ))
+        if implementation() not in ("Jython", "PyPy"):
+            p = subprocess.Popen([sys.executable,'-O','lex_many_tokens.py'],
+                                 stdout=subprocess.PIPE)
+            result = p.stdout.read()
+            self.assert_(check_expected(result,
+                                        "(TOK34,'TOK34:',1,0)\n"
+                                        "(TOK143,'TOK143:',1,7)\n"
+                                        "(TOK269,'TOK269:',1,15)\n"
+                                        "(TOK372,'TOK372:',1,23)\n"
+                                        "(TOK452,'TOK452:',1,31)\n"
+                                        "(TOK561,'TOK561:',1,39)\n"
+                                        "(TOK999,'TOK999:',1,47)\n"
+                                        ))
+
+            self.assert_(cache_module_exists("manytab.py", False))
+            cache_module_remove("manytab.py", False)
 
-        self.assert_(pymodule_out_exists("manytab.pyo"))
-        pymodule_out_remove("manytab.pyo")
         try:
             os.remove("manytab.py")
         except OSError:
             pass
         try:
-            os.remove("manytab.pyc")
+            cache_module_remove("manytab.py", True)
         except OSError:
             pass
         try:
-            os.remove("manytab.pyo")
+            cache_module_remove("manytab.py", False)
         except OSError:
             pass
         
--- test/testyacc.py
+++ test/testyacc.py
@@ -8,6 +8,7 @@
 
 import sys
 import os
+import platform
 import warnings
 import re
 
@@ -15,25 +16,43 @@
 sys.tracebacklimit = 0
 
 import ply.yacc
-import imp
 
-def make_pymodule_path(filename):
-    path = os.path.dirname(filename)
-    file = os.path.basename(filename)
-    mod, ext = os.path.splitext(file)
-
-    if sys.hexversion >= 0x3020000:
-        modname = mod+"."+imp.get_tag()+ext
-        fullpath = os.path.join(path,'__pycache__',modname)
+def implementation():
+    if platform.system().startswith("Java"):
+        return "Jython"
+    elif hasattr(sys, "pypy_version_info"):
+        return "PyPy"
+    else:
+        return "CPython"
+
+def cache_module_path(filename, debug):
+    mod, ext = os.path.splitext(filename)
+
+    if sys.hexversion >= 0x3040000:
+        import importlib.util
+        fullpath = importlib.util.cache_from_source(filename, debug)
+    elif sys.hexversion >= 0x3020000:
+        import imp
+        fullpath = imp.cache_from_source(filename, debug)
+    # Jython <3.2
+    elif implementation() == "Jython":
+        fullpath = mod + "$py.class"
+    # PyPy for Python <3.2
+    elif implementation() == "PyPy":
+        fullpath = filename + "c"
+    # CPython <3.2
     else:
-        fullpath = filename
+        if debug:
+            fullpath = filename + "c"
+        else:
+            fullpath = filename + "o"
     return fullpath
 
-def pymodule_out_exists(filename):
-    return os.path.exists(make_pymodule_path(filename))
+def cache_module_exists(filename, debug):
+    return os.path.exists(cache_module_path(filename, debug))
 
-def pymodule_out_remove(filename):
-    os.remove(make_pymodule_path(filename))
+def cache_module_remove(filename, debug):
+    os.remove(cache_module_path(filename, debug))
 
 # Old implementation (not safe for Python 3.3)
 def check_expected(result,expected):
@@ -89,7 +108,7 @@
         sys.stdout = StringIO.StringIO()
         try:
             os.remove("parsetab.py")
-            pymodule_out_remove("parsetab.pyc")
+            cache_module_remove("parsetab.py", True)
         except OSError:
             pass
         
@@ -357,6 +376,8 @@
                                     ))
 
     def test_yacc_unicode_literals(self):
+        if sys.hexversion < 0x2060000:
+            return
         run_import("yacc_unicode_literals")
         result = sys.stderr.getvalue()
         self.assert_(check_expected(result,
